{
  "_from": "ffmpeg-extract-frames",
  "_id": "ffmpeg-extract-frames@2.0.2",
  "_inBundle": false,
  "_integrity": "sha512-qF8z/RLHLrJtpPEb/6f8+cBY5EZwx2JDVdLaHo+GX1S/C5mNlmUHiI3EdGuggLetNHOX2bWjgnwCVg+oHFwL+Q==",
  "_location": "/ffmpeg-extract-frames",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "ffmpeg-extract-frames",
    "fetchSpec": "latest",
    "name": "ffmpeg-extract-frames",
    "raw": "ffmpeg-extract-frames",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/ffmpeg-extract-frames/-/ffmpeg-extract-frames-2.0.2.tgz",
  "_shasum": "81d14f78c67a4dd9e3afc3f9862f7bf891ff7a81",
  "_spec": "ffmpeg-extract-frames",
  "_where": "D:\\Courses\\COMP512_ProjWS1",
  "author": {
    "email": "travis@automagical.ai",
    "name": "Travis Fischer"
  },
  "bugs": {
    "url": "https://github.com/transitive-bullshit/ffmpeg-extract-frames/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "ffmpeg-probe": "^1.0.4",
    "fluent-ffmpeg": "^2.1.2"
  },
  "deprecated": false,
  "description": "Extracts frames from a video.",
  "devDependencies": {
    "ava": "^0.25.0",
    "rmfr": "^2.0.0",
    "sharp": "^0.20.1",
    "standard": "^11.0.0",
    "tempy": "^0.2.1"
  },
  "homepage": "https://github.com/transitive-bullshit/ffmpeg-extract-frames#readme",
  "keywords": [
    "ffmpeg",
    "fluent-ffmpeg",
    "screenshot"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "ffmpeg-extract-frames",
  "optionalDependencies": {},
  "readme": "# ffmpeg-extract-frames\n\n> Extracts frames from a video using [fluent-ffmpeg](https://github.com/fluent-ffmpeg/node-fluent-ffmpeg).\n\n[![NPM](https://img.shields.io/npm/v/ffmpeg-extract-frames.svg)](https://www.npmjs.com/package/ffmpeg-extract-frames) [![Build Status](https://travis-ci.com/transitive-bullshit/ffmpeg-extract-frames.svg?branch=master)](https://travis-ci.com/transitive-bullshit/ffmpeg-extract-frames) [![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com)\n\n## Install\n\n```bash\nnpm install --save ffmpeg-extract-frames\n# or\nyarn add ffmpeg-extract-frames\n```\n\n## Usage\n\n```js\nconst extractFrames = require('ffmpeg-extract-frames')\n\n// extract 3 frames at 1s, 2s, and 3.5s respectively\nawait extractFrames({\n  input: 'media/1.mp4',\n  output: './screenshot-%i.jpg',\n  offsets: [\n    1000,\n    2000,\n    3500\n  ]\n})\n\n// generated screenshots:\n// ./screenshot-1.jpg\n// ./screenshot-2.jpg\n// ./screenshot-3.jpg\n```\n\n```js\n// default behavior is to extract all frames\nawait extractFrames({\n  input: 'media/1.mp4',\n  output: './frame-%d.png'\n})\n\n// generated screenshots:\n// ./frame-1.png\n// ./frame-2.png\n// ...\n// ./frame-100.png\n```\n\n## API\n\n### extractFrames(options)\n\nExtracts one or more frames from a video file. Returns a `Promise` for when all frames have been written.\n\nThere are several options for specifying which frames to extract, namely `timestamps`, `offsets`, `fps`, and `numFrames`. The default behavior if you don't specify any of these options is to extract *all* frames from the input.\n\n#### options\n\n##### input\n\nType: `String`\n**Required**\n\nPath or URL to a video file.\n\n##### output\n\nType: `String`\n**Required**\n\nOutput file pattern.\n\nNote that for `timestamps` or `offsets`, the pattern should include a `%i` or `%s` ([details](https://github.com/fluent-ffmpeg/node-fluent-ffmpeg#screenshotsoptions-dirname-generate-thumbnails)).\n\nFor any other call, you should use the `%d` format specifier. I know this is confusing, but it's how [fluent-ffmpeg](https://github.com/fluent-ffmpeg/node-fluent-ffmpeg) works under the hood.\n\n##### offsets\n\nType: `Array<Number>`\n\nArray of seek offsets to take the screenshot from in milliseconds.\n\n##### timestamps\n\nType: `Array<Number|String>`\n\nSame as fluent-ffmpeg's [screenshots.timestamps](https://github.com/fluent-ffmpeg/node-fluent-ffmpeg#screenshotsoptions-dirname-generate-thumbnails).\n\n##### fps\n\nType: `Number`\n\nFrames per second to output.\n\n##### numFrames\n\nType: `Number`\n\nOutput a specific number of frames. The input video's frames will be skipped such that only this number of frames are output.\n\n##### log\n\nType: `Function`\nDefault: `noop`\n\nOptional function to log the underlying ffmpeg command (like `console.log`).\n\n##### ffmpegPath\n\nType: `String`\n\nSpecify a path for the ffmpeg binary.\n\n## Related\n\n- [ffmpeg-extract-frame](https://github.com/transitive-bullshit/ffmpeg-extract-frame) - Extracts a single frame from a video.\n- [ffmpeg-generate-video-preview](https://github.com/transitive-bullshit/ffmpeg-generate-video-preview) - Generates an attractive image strip or GIF preview from a video.\n- [gif-extract-frames](https://github.com/transitive-bullshit/gif-extract-frames) - Analogous module for extracting frames from GIF files.\n- [fluent-ffmpeg](https://github.com/fluent-ffmpeg/node-fluent-ffmpeg) - A fluent API to [FFmpeg](http://ffmpeg.org/).\n- [awesome-ffmpeg](https://github.com/transitive-bullshit/awesome-ffmpeg) - A curated list of awesome ffmpeg resources with a focus on JavaScript.\n\n## License\n\nMIT Â© [Travis Fischer](https://github.com/transitive-bullshit)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/transitive-bullshit/ffmpeg-extract-frames.git"
  },
  "reveal": true,
  "scripts": {
    "test": "ava -v && standard"
  },
  "version": "2.0.2"
}
